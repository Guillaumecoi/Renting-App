package coigniez.rentapp.model.$LOWERCASE_ENTITY;

import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**
 * Service class for managing $ENTITYs.
 */
@Service
public class $ENTITYService {
    private final $ENTITYRepository $LOWERCASE_ENTITYRepository;
    private final $ENTITYMapper $LOWERCASE_ENTITYMapper = new $ENTITYMapper();

    /**
     * Constructor for $ENTITYService.
     *
     * @param $LOWERCASE_ENTITYRepository The repository for $ENTITY.
     */
    public $ENTITYService($ENTITYRepository $LOWERCASE_ENTITYRepository) {
        this.$LOWERCASE_ENTITYRepository = $LOWERCASE_ENTITYRepository;
    }

    /**
     * Save a $ENTITY.
     *
     * @param $LOWERCASE_ENTITY The $ENTITYDTO to save.
     * @return The saved $ENTITYDTO.
     */
    public $ENTITYDTO save$ENTITY($ENTITYDTO $LOWERCASE_ENTITY) {
        $ENTITY saved$ENTITY = $LOWERCASE_ENTITYRepository.save($LOWERCASE_ENTITYMapper.dtoToEntity($LOWERCASE_ENTITY));
        return $LOWERCASE_ENTITYMapper.entityToDto(saved$ENTITY);
    }

    /**
     * Find a $ENTITY by id.
     *
     * @param id The id of the $ENTITY to find.
     * @return The found $ENTITYDTO.
     */
    public Optional<$ENTITYDTO> find$ENTITYById(Long id) {
        return $LOWERCASE_ENTITYRepository.findById(id).map($LOWERCASE_ENTITYMapper::entityToDto);
    }

    /**
     * Find all $ENTITYs.
     *
     * @return A list of all $ENTITYDTOs.
     */
    public List<$ENTITYDTO> findAll$ENTITYs() {
        List<$ENTITY> $LOWERCASE_ENTITYs = $LOWERCASE_ENTITYRepository.findAll();
        return $LOWERCASE_ENTITYMapper.entitiesToDtos($LOWERCASE_ENTITYs);
    }

    /**
     * Update a $ENTITY.
     *
     * @param $LOWERCASE_ENTITY The $ENTITYDTO to update.
     * @return The updated $ENTITYDTO.
     */
    public $ENTITYDTO update$ENTITY($ENTITYDTO $LOWERCASE_ENTITY) {
        $ENTITY updated$ENTITY = $LOWERCASE_ENTITYRepository.save($LOWERCASE_ENTITYMapper.dtoToEntity($LOWERCASE_ENTITY));
        return $LOWERCASE_ENTITYMapper.entityToDto(updated$ENTITY);
    }

    /**
     * Delete a $ENTITY from the database.
     *
     * @param id The id of the $ENTITY to delete.
     */
    public void delete$ENTITY(Long id) {
        $LOWERCASE_ENTITYRepository.deleteById(id);
    }

    /**
     * Delete a $ENTITY from the database.
     *
     * @param $LOWERCASE_ENTITY The $ENTITYDTO to delete.
     */
    public void delete$ENTITY($ENTITYDTO $LOWERCASE_ENTITY) {
        $LOWERCASE_ENTITYRepository.delete($LOWERCASE_ENTITYMapper.dtoToEntity($LOWERCASE_ENTITY));
    }
}